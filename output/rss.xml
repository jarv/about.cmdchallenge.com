<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>cmdchallenge</title><link>https://about.cmdchallenge.com/</link><description></description><lastBuildDate>Sun, 30 Apr 2017 00:00:00 -0400</lastBuildDate><item><title>Adding checks against random data for shell submissions</title><link>https://about.cmdchallenge.com/randomizers.html</link><description>&lt;p&gt;One of the nice features of coding challenge sites like &lt;a href="https://hackerrank.com"&gt;hackerrank&lt;/a&gt; is that
when you submit an algorithm it will also be checked against random data. This
validates the performance of the algorithm and will test it against different inputs.
&lt;a href="https://cmdchallenge.com"&gt;CMD Challenge&lt;/a&gt; is a web application that executes shell commands
remotely in a Docker container. When it was initially
launched, all the checker did was validate the output of the execution
against a list of strings, expressed in YAML.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href="https://cmdchallenge.com/#/hello_world"&gt;"hello world" challenge&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;slug&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello_world&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;Print &amp;quot;hello world&amp;quot;.&lt;/span&gt;
      &lt;span class="no"&gt;Hint: There are many ways to print text on&lt;/span&gt;
      &lt;span class="no"&gt;the command line, one way is with the &amp;#39;echo&amp;#39;&lt;/span&gt;
      &lt;span class="no"&gt;command.&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;expected_output&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lines&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the user submits "&lt;code&gt;echo hello world&lt;/code&gt;" the command is executed remotely and
the response is validated against the string "&lt;code&gt;hello world&lt;/code&gt;". This worked fine for commands
that only needed to be verified by checking their output, but what about commands that
modify files on disk? For these types of challenges there are a
&lt;a href="https://github.com/jarv/cmdchallenge/tree/master/ro_volume/cmdtests"&gt;a set of shell scripts&lt;/a&gt;
that also run inside the container and will return non-zero if any of pre-determined tests fail.
This is how the &lt;a href="https://cmdchallenge.com/#/delete_files"&gt;"delete files"&lt;/a&gt;,
&lt;a href="https://cmdchallenge.com/#/remove_files_with_extension"&gt;"remove files with extension"&lt;/a&gt;
challenges and other similar ones work to ensure the bash one-line command you entered
is correct.&lt;/p&gt;
&lt;p&gt;This solves most of the validation but what about this challenge?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;slug&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sum_all_numbers&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;The file sum-me.txt has a list of numbers,&lt;/span&gt;
      &lt;span class="no"&gt;one per line. Print the sum of these numbers.&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;expected_output&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lines&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;42&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One way you can "trick" the site is to simply enter the command "&lt;code&gt;echo 42&lt;/code&gt;" which
is the correct sum of the numbers in "&lt;code&gt;sum-me.txt&lt;/code&gt;".
In fact, a lot of random internet people did exactly that
as you can see from a small subset of submissions that were previously
marked as "correct":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; 42
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;42&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;42&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&amp;quot;2&amp;quot;&lt;/span&gt;
expr &lt;span class="m"&gt;41&lt;/span&gt; + 1
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
etc. etc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the next natural thing to do is to add a way to randomize the data that the
command is operating on. Just like scripts added to run tests, now there are
bash scripts for every challenge that allow you to manipulate files before
running the command again.  Only if the output is still correct 
(and tests pass, if they are present) will
then the challenge be marked as correct.&lt;/p&gt;
&lt;p&gt;For example, for the &lt;a href="https://cmdchallenge.com/#/sum_all_numbers"&gt;"sum all numbers"&lt;/a&gt; challenge
the script looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="nv"&gt;$RANDOM&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt; &amp;gt;&amp;gt; sum-me.txt
paste -sd+ sum-me.txt &lt;span class="p"&gt;|&lt;/span&gt; bc
&lt;span class="nb"&gt;exit&lt;/span&gt; 0
&lt;/pre&gt;&lt;/div&gt;


&lt;div style="float: right;margin-right: 1em; margin-left: .5em;"&gt;
    &lt;a href="https://cmdchallenge.com/#/sum_all_numbers"&gt;&lt;img src="https://i.imgur.com/rkqKXjW.png" alt="randomizers" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Now if you type the command "&lt;code&gt;echo 42&lt;/code&gt;" the randomizer check will fail since will also verify that
the command can run against the modified "&lt;code&gt;sum-me.txt&lt;/code&gt;" file.
Currently, there are a randomizer scripts added for a subset of challenges.
If you want to contribute and add more please feel free to send a &lt;a href="https://github.com/jarv/cmdchallenge/pulls"&gt;pull request&lt;/a&gt;.
If you would like to
read some more about how the site is built in an AWS free tier account see the earlier post on 
&lt;a href="/building-cmdchallenge.html"&gt;building cmdchallenge&lt;/a&gt;. If you liked this write up let me know
by following &lt;a href="https://twitter.com/thecmdchallenge"&gt;@thecmdchallenge&lt;/a&gt; on twitter or drop
me mail at &lt;a href="mailto:info@cmdchallenge.com"&gt;info@cmdchallenge.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jarv</dc:creator><pubDate>Sun, 30 Apr 2017 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:about.cmdchallenge.com,2017-04-30:randomizers.html</guid></item><item><title>Building cmdchallenge using Lambda and API Gateway in the AWS free-tier with Docker and Go</title><link>https://about.cmdchallenge.com/building-cmdchallenge.html</link><description>&lt;p&gt;Have you ever thought about building a side-project for fun without spending a lot on hosting?
This post might be for you. With the most tech-buzz-wordy title I could conjure up here is 
a quick overview of how &lt;a href="https://cmdchallenge.com"&gt;cmdchallenge.com&lt;/a&gt; is built.
The site is a simple web application side-project that executes shell commands
remotely in a docker container in AWS. The front-end gives the feeling of a normal terminal but underneath
it is sending whatever commands you give it remotely on an EC2 instance inside a Docker container.&lt;/p&gt;
&lt;p&gt;The source code for most of it is located &lt;a href="https://github.com/jarv/cmdchallenge"&gt;on github&lt;/a&gt; including
 a tiny command executer written in Go, the challenge definitions, and a test harness.&lt;/p&gt;
&lt;p&gt;The following AWS services are used for the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloudfront&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;S3 bucket&lt;/li&gt;
&lt;li&gt;Lambda function&lt;/li&gt;
&lt;li&gt;DynamoDB&lt;/li&gt;
&lt;li&gt;t2.micro EC2 Instance running coreos&lt;/li&gt;
&lt;li&gt;CloudWatch logs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;p&gt;In addition to this Amazon Certificate Manager and Route53 was used but for everything above you can keep costs close to zero in AWS. There is no free tier for Route53 (sad panda) but it's like 50 cents a month for a single zone.&lt;/p&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Features:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Submit commands, execute them in a bash sub-shell.&lt;/li&gt;
&lt;li&gt;Check the output of the command for different challenges.&lt;/li&gt;
&lt;li&gt;Run tests for challenges that need them in addition or in place of checking output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Deployment tools (simple and boring):&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Makefiles.&lt;/li&gt;
&lt;li&gt;Python fabric for running commands and copying files over ssh.&lt;/li&gt;
&lt;li&gt;Kappa, zips up code, sends it to lambda, also manages Lambda permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p/&gt;
With these tools the following automated steps are taken to deploy the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Docker image that holds the challenges.&lt;/li&gt;
&lt;li&gt;Launch a new coreos EC2 instance.&lt;/li&gt;
&lt;li&gt;Run a fabric script that does the following on the instance over SSH:&lt;ul&gt;
&lt;li&gt;Configures TLS so that a Lambda function can communicate to Docker on an EC2 instance.&lt;/li&gt;
&lt;li&gt;Executes some periodic commands to ensure that the host cleans up old containers.&lt;/li&gt;
&lt;li&gt;Downloads the docker image that has the challenges.&lt;/li&gt;
&lt;li&gt;Copies the read-only volume that is used on the container for the tests and command runner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update Lambda with new code.&lt;/li&gt;
&lt;li&gt;Sync the static assets to S3.&lt;/li&gt;
&lt;li&gt;Invalidates CF cache for the main site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Architecture diagram:&lt;/h2&gt;
&lt;p&gt;There are two public entry points for the site, one is the main web-site which is static and served S3. 
The other is the API gateway at api.cmdchallenge.com which is also fronted by CloudFront so that it can
use a certificate from ACM and cache requests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  api.cmdchallenge.com         cmdchallenge.com
  ********************         ****************
+---------------------+    +---------------------+ 
|      Cloudfront     |    |      Cloudfront     |   
+---------------------+    +---------------------+  
           |                          | 
+---------------------+         +-----------+
|    API Gateway      |         | s3 bucket |
+---------------------+         +-----------+
           |
  +-----------------+
  |                 |
  | Lambda Function |    +----------+
  |                 |--- |          |
  +-----------------+   \| DynamoDB |
           |             |          |
   +--------------+      +----------+
   | EC2 t2.micro |
   |   (coreos)   |
   +--------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;p&gt;One nice thing about using AWS server-less components was that &lt;strong&gt;a single t2.micro instance ended up being fine for handling all of the load, even at peak.&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;See section on caching/performance below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Here is what happens when a command is submitted in the &lt;a href="cmdchallenge.com terminal"&gt;cmdchallenge.com&lt;/a&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Javascript code sends an HTTP GET to https://api.cmdchallenge.com&lt;/li&gt;
&lt;li&gt;If it is cached it returns a response immediately. If not, it forwards the request to the API gateway which in turn sends it to a Lambda function.&lt;/li&gt;
&lt;li&gt;The Lambda function looks up the challenge and the command in DynamoDb and if it already has an answer it returns that. If the challenge doesn't exist in DyamoDB it is forwarded to the EC2 instance as a command using the docker API.&lt;/li&gt;
&lt;li&gt;The command that the user provides is passed to a Go command runner that executes the command in a bash sub-shell inside a docker container, checks the output and runs the tests.&lt;/li&gt;
&lt;li&gt;Results are returned to the Lambda function, it writes them to DynamoDb and returns the response.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;The challenges are expressed in a single YAML, here an example of one challenge:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;slug&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello_world&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;version&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;author&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cmdchallenge&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;Print &amp;quot;hello world&amp;quot;.&lt;/span&gt;
      &lt;span class="no"&gt;Hint: There are many ways to print text on&lt;/span&gt;
      &lt;span class="no"&gt;the command line, one way is with the &amp;#39;echo&amp;#39;&lt;/span&gt;
      &lt;span class="no"&gt;command.&lt;/span&gt;

      &lt;span class="no"&gt;Try it below and good luck!&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;example&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;#39;hello world&amp;#39;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;expected_output&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lines&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p/&gt; 
Interested in coming up with your own? You can submit your own challenge with a &lt;a href="https://github.com/jarv/cmdchallenge/pulls"&gt;pull request&lt;/a&gt;. Your challenge will be added to the user-contributed section of the site.&lt;/p&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Caching:&lt;/h2&gt;
&lt;p&gt;You may notice that when you do &lt;code&gt;echo hello world&lt;/code&gt; on the &lt;a href="https://cmdchallenge.com/#/hello_world"&gt;hello world challenge&lt;/a&gt; it returns almost immediately.
As it is shown above there are two layers of cache, one at CloudFront and one at DynamoDb to reduce
the number of command executions on the Docker container.
API Gateway &lt;em&gt;can&lt;/em&gt; provide caching but it costs money, I worked around this by sticking CloudFront in front of it but this
is only possible with HTTP GETs.
With Cloudfront in front the cache-control header in 
the response from Lambda is set to a very long cache lifetime with every request. 
The version of the challenge as well as a global cache buster param is passed in so we never 
have to worry about returning a response from a stale challenge.&lt;/p&gt;
&lt;p&gt;&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Performance:&lt;/h2&gt;
&lt;p&gt;If you are wondering how well this would scale for a lot of traffic, the Lambda function currently dispatches
commands to a random host in a statically configured list of EC2 instances making it pretty easy
to add more capacity. So far it seems to be operating fine with a single t2.micro EC2 instance handling
all command requests that are not cached.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time to get a &lt;code&gt;echo hello world&lt;/code&gt; response from a cached cloudfront command - &lt;strong&gt;~50ms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Time to get a &lt;code&gt;echo hello world&lt;/code&gt; response from a cached command in dynamoDB - &lt;strong&gt;~2.5s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Time to get a &lt;code&gt;echo hello world&lt;/code&gt; response, executed in a container - &lt;strong&gt;~4s&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without caching this wouldn't be possible and also the caching at CloudFront enables most commands to
return fairly quickly.
&lt;p/&gt; &lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;If you like the site please follow &lt;a href="https://twitter.com/thecmdchallenge"&gt;@thecmdchallenge&lt;/a&gt; on twitter or if you have
suggestions drop me a mail at &lt;a href="mailto:info@cmdchallenge.com"&gt;info@cmdchallenge.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jarv</dc:creator><pubDate>Mon, 24 Apr 2017 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:about.cmdchallenge.com,2017-04-24:building-cmdchallenge.html</guid></item><item><title>User Submitted Solutions</title><link>https://about.cmdchallenge.com/user-submitted-solutions.html</link><description>&lt;p&gt;Adding to the interesting &lt;a href="/191-hello-worlds.html"&gt;191 ways to echo hello world&lt;/a&gt; I've now added the ability
to see &lt;a href="https://cmdchallenge.com/s/"&gt;user-submitted solutions&lt;/a&gt; to &lt;a href="https://cmdchallenge.com"&gt;cmdchallenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some gems if you dig through them including maybe the longest regex I've ever seen for
pulling an IP address out of a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;25&lt;span class="o"&gt;[&lt;/span&gt;0-5&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;2&lt;span class="o"&gt;[&lt;/span&gt;0-4&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;01&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;[&lt;/span&gt;0-9&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;25&lt;span class="o"&gt;[&lt;/span&gt;0-5&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;2&lt;span class="o"&gt;[&lt;/span&gt;0-4&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;01&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;[&lt;/span&gt;0-9&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;25&lt;span class="o"&gt;[&lt;/span&gt;0-5&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;2&lt;span class="o"&gt;[&lt;/span&gt;0-4&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;01&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;[&lt;/span&gt;0-9&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;25&lt;span class="o"&gt;[&lt;/span&gt;0-5&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;2&lt;span class="o"&gt;[&lt;/span&gt;0-4&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;01&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;[&lt;/span&gt;0-9&lt;span class="o"&gt;][&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;?&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also scrolling down the page of &lt;a href="https://cmdchallenge.com/s/#/corrupted_text"&gt;solutions to the corrupted text problem&lt;/a&gt;
is glorious.&lt;/p&gt;
&lt;p&gt;&lt;s&gt;The solutions are not updated regularly right now but would be easy enough to do in the future if people want to see
more, let me know on &lt;a href="https://twitter.com/thecmdchallenge"&gt;twitter&lt;/a&gt; and also&lt;/s&gt; &lt;strong&gt;Update&lt;/strong&gt;: Solutions are now generated every
five minutes. Feel free to submit suggestions for
new challenges on &lt;a href="https://github.com/jarv/cmdchallenge"&gt;github&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jarv</dc:creator><pubDate>Sat, 04 Mar 2017 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:about.cmdchallenge.com,2017-03-04:user-submitted-solutions.html</guid></item><item><title>figlet breakout</title><link>https://about.cmdchallenge.com/figlet-breakout.html</link><description>&lt;p&gt;I was looking for a cool ending for &lt;a href="https://cmdchallenge.com"&gt;cmdchallenge&lt;/a&gt; and decided
to dust off a 2 year old javascript project which created a breakout game from figlet
fonts. Not quite a full re-write but fixed a lot of bugs and did away completely with
coffee-script. More info on the &lt;a href="https://github.com/jarv/figlet-breakout"&gt;github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or you can &lt;a href="https://www.jarv.org/figlet-breakout/#/click%20me%20to%20play"&gt;click here to play&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jarv</dc:creator><pubDate>Fri, 24 Feb 2017 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:about.cmdchallenge.com,2017-02-24:figlet-breakout.html</guid></item><item><title>191 ways to echo hello world on the command line</title><link>https://about.cmdchallenge.com/191-hello-worlds.html</link><description>&lt;p&gt;It's been about 12 days since the launch of &lt;a href="https://cmdchallenge.com"&gt;cmdchallenge&lt;/a&gt;, a weekend project
to create some common command-line tasks that can be done in a single line of bash.
One common request has been to share user-submitted solutions. Or to put it another way,
you may be wondering &lt;em&gt;what do random people on the internet and hackernews type if you give them
some basic command-line tasks and a shell prompt?&lt;/em&gt;  Well lucky for me this is no longer a mystery!&lt;/p&gt;
&lt;p&gt;Starting off with Challenge #1:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cmdchallenge.com/#/hello_world"&gt;CMD Challenge #1&lt;/a&gt;: &lt;strong&gt;print "hello world" at the bash prompt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There has been a lot of diverse input for such a simple task. I really love how people do weird stuff even when it is totally unnecessary.&lt;/p&gt;
&lt;p&gt;Here are some of my favorites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i in h e l l o &lt;span class="se"&gt;\ &lt;/span&gt; w o r l d &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;awk -F, &lt;span class="s1"&gt;&amp;#39; {print $NR}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;tr -d &lt;span class="se"&gt;\\&lt;/span&gt;n&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ifmmp xpsme &lt;span class="p"&gt;|&lt;/span&gt;tr bcdefghijklmnopqrstuvwxyza abcdefghijklmnopqrstuvwxyz
touch helloworld &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; helloworld &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat helloworld
sed &lt;span class="s1"&gt;&amp;#39;s.\.\...;yhHh\hh;ywWw\ww;2,$d&amp;#39;&lt;/span&gt; README
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few things to note that may clarify some of the more interesting submissions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;code&gt;README&lt;/code&gt; in each challenge directory, in this case it contains the string "hello world" so some people took advantage of that.&lt;/li&gt;
&lt;li&gt;The directory itself was named &lt;code&gt;hello world&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are all of the correct submissions for the first challenge as of yesterday:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;d e h l o r w X &lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;tr X&lt;span class="se"&gt;\n&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i in h e l l o &lt;span class="se"&gt;\ &lt;/span&gt; w o r l d &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;awk -F, &lt;span class="s1"&gt;&amp;#39; {print $NR}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;tr -d &lt;span class="se"&gt;\\&lt;/span&gt;n&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in h e l l o&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; j in w o r l d&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
cat README &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail -n &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $3 &amp;quot; &amp;quot; $4 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/\&amp;quot;//g;s/\.//g&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ifmmp xpsme &lt;span class="p"&gt;|&lt;/span&gt;tr bcdefghijklmnopqrstuvwxyza abcdefghijklmnopqrstuvwxyz
&amp;lt; README grep hello &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -f3- -d&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
touch helloworld &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; helloworld &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat helloworld
&lt;span class="nv"&gt;letters&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;h e l l o &lt;span class="se"&gt;\ &lt;/span&gt; w o r l d&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
touch test.txt &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; test.txt &lt;span class="p"&gt;;&lt;/span&gt; cat test.txt
grep &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; README &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;&amp;#39;s/.*(hello world).*/\1/&amp;#39;&lt;/span&gt;
cat README &lt;span class="p"&gt;|&lt;/span&gt; grep Print &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;&amp;#39;s/^.+&amp;quot;([^&amp;quot;]+)&amp;quot;.+$/\1/&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; ./hiworld.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat ./hiworld.txt
head -n &lt;span class="m"&gt;1&lt;/span&gt; &amp;lt; README  &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/# //&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;
cat &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;cut -d&lt;span class="se"&gt;\;&lt;/span&gt; -f4&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;;hello world;&amp;quot;&lt;/span&gt; &amp;gt; /dev/null
touch file &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; file &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat file
cat README &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/.*/hello world/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; head -1
touch &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; ls *hell*&lt;span class="p"&gt;;&lt;/span&gt; rm &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
head -1 README &lt;span class="p"&gt;|&lt;/span&gt; cut -c3- &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; hello.txt &lt;span class="p"&gt;|&lt;/span&gt; cat hello.txt
awk &lt;span class="s1"&gt;&amp;#39;BEGIN {print &amp;quot;hello world&amp;quot;}&amp;#39;&lt;/span&gt; &amp;lt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; hello.txt&lt;span class="p"&gt;;&lt;/span&gt; cat hello.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; testfile&lt;span class="p"&gt;;&lt;/span&gt; cat testfile
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; test.txt&lt;span class="p"&gt;;&lt;/span&gt; cat test.txt
grep hello README &lt;span class="p"&gt;|&lt;/span&gt; awk -F&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; n in &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
sed &lt;span class="s1"&gt;&amp;#39;s.\.\...;yhHh\hh;ywWw\ww;2,$d&amp;#39;&lt;/span&gt; README
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; foo.txt&lt;span class="p"&gt;;&lt;/span&gt; cat foo.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;h&amp;quot;&amp;quot;e&amp;quot;&amp;quot;l&amp;quot;&amp;quot;l&amp;quot;&amp;quot;o&amp;quot;&amp;quot; &amp;quot;&amp;quot;w&amp;quot;&amp;quot;o&amp;quot;&amp;quot;r&amp;quot;&amp;quot;l&amp;quot;&amp;quot;d&amp;quot;&lt;/span&gt;
touch &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls h*&lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nv"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
cat README&lt;span class="p"&gt;|&lt;/span&gt; grep hello &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; -f2
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print &amp;quot;hello world&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&amp;gt;hello &lt;span class="p"&gt;|&lt;/span&gt; tail hello
awk &lt;span class="s1"&gt;&amp;#39; BEGIN { print &amp;quot;hello world&amp;quot; } &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HAHA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$HAHA&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &amp;gt; henk &lt;span class="p"&gt;|&lt;/span&gt; cat henk
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; cat &lt;span class="nb"&gt;test&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39;BEGIN { print &amp;quot;hello world&amp;quot;; }&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; hello&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; world&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
perl -e &lt;span class="s1"&gt;&amp;#39;printf &amp;quot;%s&amp;quot;, &amp;quot;hello world&amp;quot;&amp;#39;&lt;/span&gt;
mkdir &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls &lt;span class="p"&gt;|&lt;/span&gt; tail -1
awk &lt;span class="s1"&gt;&amp;#39;BEGIN { print &amp;quot;hello world&amp;quot; }&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;pwd&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f4 &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/_/ /g&amp;#39;&lt;/span&gt;
touch &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; ls &lt;span class="p"&gt;|&lt;/span&gt; grep ello
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s%s%s%s\n&amp;#39;&lt;/span&gt; hel lo&lt;span class="se"&gt;\ &lt;/span&gt; wor ld
cat README &lt;span class="p"&gt;|&lt;/span&gt; grep -o &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/b/h/g&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print &amp;quot;hello world&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; tmp&lt;span class="p"&gt;;&lt;/span&gt; cat tmp
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world &amp;gt; henk&lt;span class="p"&gt;;&lt;/span&gt; cat henk
cat &amp;gt;/dev/stdout &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39;BEGIN{print &amp;quot;hello world&amp;quot;;}&amp;#39;&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39;BEGIN{print(&amp;quot;hello world&amp;quot;)}&amp;#39;&lt;/span&gt;
cat &amp;gt;/dev/stderr &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39;BEGIN {print &amp;quot;hello world&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&amp;gt;algo&lt;span class="p"&gt;;&lt;/span&gt;cat algo
&lt;span class="nv"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$hello&lt;/span&gt;
perl -e &lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world\n&amp;quot;;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;GGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; cat &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$GGG&lt;/span&gt;
echo&lt;span class="p"&gt;|&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;{print &amp;quot;hello world&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &amp;gt; /dev/stdout
awk &lt;span class="s1"&gt;&amp;#39;BEGIN{print &amp;quot;hello world&amp;quot;}&amp;#39;&lt;/span&gt;
ls .. &lt;span class="p"&gt;|&lt;/span&gt; grep hel &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/_/ /g&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s %s\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
perl -e &lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world\n&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; s &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/s/hello world/&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/bash\necho &amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; -- &lt;span class="s1"&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s %s&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
perl -le &lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;
perl -e &lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world&amp;quot;;&amp;#39;&lt;/span&gt;
perl -e &lt;span class="s2"&gt;&amp;quot;print &amp;#39;hello world&amp;#39;;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;gt; a &lt;span class="p"&gt;;&lt;/span&gt; cat a
&lt;span class="nb"&gt;echo&lt;/span&gt; -n hello &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; world&amp;quot;&lt;/span&gt;
perl -e &lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world&amp;quot;&amp;#39;&lt;/span&gt;
perl -e &lt;span class="s2"&gt;&amp;quot;print &amp;#39;hello world&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;STR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$STR&lt;/span&gt;
perl -E &lt;span class="s1"&gt;&amp;#39;say &amp;quot;hello world&amp;quot;;&amp;#39;&lt;/span&gt;
grep hello &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
perl -e&lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s\\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
perl -E &lt;span class="s1"&gt;&amp;#39;say q[hello world]&amp;#39;&lt;/span&gt;
touch &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; ls *&lt;span class="se"&gt;\ &lt;/span&gt;*
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s %s\n&amp;#39;&lt;/span&gt; hello world
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cat -
&lt;span class="nv"&gt;VAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$VAR&lt;/span&gt;
cat &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
perl -E &lt;span class="s1"&gt;&amp;#39;say &amp;quot;hello world&amp;quot;&amp;#39;&lt;/span&gt;
date&lt;span class="p"&gt;|&lt;/span&gt;sed s/.*/hello&lt;span class="se"&gt;\ &lt;/span&gt;world/
touch &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; ls he*
&lt;span class="nb"&gt;echo&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cat -
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
perl -e&lt;span class="s1"&gt;&amp;#39;print&amp;quot;hello world&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello %s\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%b\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
echo&lt;span class="p"&gt;|&lt;/span&gt;sed -n &lt;span class="s2"&gt;&amp;quot;i hello world&amp;quot;&lt;/span&gt;
touch &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; ls h*
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cat -
&lt;span class="nb"&gt;printf&lt;/span&gt; %s&lt;span class="se"&gt;\\&lt;/span&gt;n &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dlrow olleh&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; rev
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s %s&amp;#39;&lt;/span&gt; hello world
&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; hello world
&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF\nhello world\nEOF&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; -- &lt;span class="s1"&gt;&amp;#39;hello world\n&amp;#39;&lt;/span&gt;
cat &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello %s&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello %s&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; -- &lt;span class="s2"&gt;&amp;quot;hello world\n&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dlrow olleh&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; rev
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cat
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="p"&gt;##*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;tr _ &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world\013&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s &amp;#39;&lt;/span&gt; hello world
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cat
/bin/echo &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
/bin/echo &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; %s &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
cat - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;hello world\n&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; -- &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\n&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; %s &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
cat - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
cat - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world\n&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -ne &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;cat
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world\n&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world &lt;span class="p"&gt;|&lt;/span&gt; cat
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;hello world&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -n  &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
cat &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
/bin/echo hello world
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
cat &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; dlrow olleh&lt;span class="p"&gt;|&lt;/span&gt;rev
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
cat &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;hello world&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
cat &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;hello world&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -n hello world
&lt;span class="nb"&gt;echo&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; hello&lt;span class="se"&gt;\ &lt;/span&gt;world
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;$&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world &amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;$&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e hello world
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;hello world
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello&lt;span class="se"&gt;\ &lt;/span&gt;world&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello   world
&lt;span class="s1"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt; hello world
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;world
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello &lt;span class="se"&gt;\w&lt;/span&gt;orld
&lt;span class="nb"&gt;echo&lt;/span&gt; hello  world
&lt;span class="nb"&gt;echo&lt;/span&gt; hello&lt;span class="se"&gt;\ &lt;/span&gt;world
&lt;span class="nb"&gt;echo&lt;/span&gt;  hello world
&lt;span class="nb"&gt;echo&lt;/span&gt; hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Of course there are a lot of quoting and space variations here as well. I will make a
data-dump available soon with the responses for all challenges.&lt;/p&gt;
&lt;p&gt;On the building and hosting side of things this is getting more than the usual tiny trickle of side-project internet traffic.
So far I have tried to contain the entire thing in an AWS free tier account, it has worked out OK so far with a
few hiccups here and there. Since several people have asked, I will share more details about how the site is put
together in a future post, follow &lt;a href="https://twitter.com/thecmdchallenge"&gt;cmdchallenge on twitter&lt;/a&gt; or
use &lt;a href="/rss.xml"&gt;rss&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jarv</dc:creator><pubDate>Wed, 08 Feb 2017 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:about.cmdchallenge.com,2017-02-08:191-hello-worlds.html</guid></item><item><title>cmdchallenge - now with badges</title><link>https://about.cmdchallenge.com/now-with-badges.html</link><description>&lt;p&gt;&lt;img alt="New badges" src="https://i.imgur.com/hHDsAS4h.png" /&gt;&lt;/p&gt;
&lt;p&gt;Just returned from an extended weekend of traveling and now finally getting to
open questions and issues on the &lt;a href="https://cmdchallenge.com"&gt;cmdchallenge&lt;/a&gt; site. Sorry
for the slow responses.&lt;/p&gt;
&lt;p&gt;With a few hours to hack on the front-end I did a quick face-lift and also created some fun badges.
Local browser storage is used to store state so unfortunately you will lose your progress from one
computer to the next. If people want it I could add logins but it seems like it might be more trouble
than it is worth.  New challenges are coming in via pull requests (thanks!) and I think I will move
the user-contributed ones into their own category soon. If you have more ideas please let me know
via &lt;a href="https://twitter.com/thecmdchallenge"&gt;twitter&lt;/a&gt; or mail.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tel Aviv" src="https://i.imgur.com/KpNPaoIm.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Now the back to work and back to cold weather...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jarv</dc:creator><pubDate>Tue, 07 Feb 2017 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:about.cmdchallenge.com,2017-02-07:now-with-badges.html</guid></item></channel></rss>